using System.Collections.Immutable;
using CodeChops.SourceGeneration.Utilities;
using Microsoft.CodeAnalysis.Diagnostics;

namespace CodeChops.DomainDrivenDesign.DomainModeling.SourceGeneration.IdentityGenerator;

[Generator]
public class IdGenerator : IIncrementalGenerator
{
	internal const string AttributeNamespace		= "CodeChops.DomainDrivenDesign.DomainModeling.Attributes";
	internal const string AttributeName				= "GenerateStronglyTypedId";
	internal const string EntityNamespace			= "CodeChops.DomainDrivenDesign.DomainModeling";
	internal const string EntityName				= "Entity";
	internal const string IdNamespace				= "CodeChops.DomainDrivenDesign.DomainModeling.Identities";
	internal const string DefaultIdTypeName			= "Identity";
	internal const string DefaultIdPropertyName		= "Id";
	internal const string DefaultIdPrimitiveType	= "UInt64";
	
	public void Initialize(IncrementalGeneratorInitializationContext context)
	{		
		var valueProvider = context.SyntaxProvider
			.CreateSyntaxProvider(
				predicate: IdSyntaxReceiver.CheckIfProbablyNeedsStronglyTypedId,
				transform: static (context, _) => IdSyntaxReceiver.GetModel((TypeDeclarationSyntax)context.Node, context.SemanticModel))
			.Where(static model => model is not null)
			.Collect()
			.Combine(context.AnalyzerConfigOptionsProvider);
		
		context.RegisterSourceOutput(source: valueProvider, action: static (context, valueProvider) => CreateSource(context, valueProvider.Left!, valueProvider.Right));
	}
	
	private static void CreateSource(SourceProductionContext context, ImmutableArray<IdDataModel> models, AnalyzerConfigOptionsProvider configOptionsProvider)
	{
		foreach (var model in models)
		{
			var code = CreateSource(model);

			var fileName = model.Namespace is null 
				? model.OuterClassName 
				: $"{model.Namespace}.{model.OuterClassName}";

			fileName = $"{fileName}.{model.IdTypeName}";
			fileName = FileNameHelpers.GetFileName(fileName, configOptionsProvider);
			
			context.AddSource(fileName, SourceText.From(code, Encoding.UTF8));
		}
	}

	private static string CreateSource(IdDataModel idData)
	{
		var className = $"{idData.OuterClassName}{idData.OuterClassGenericTypeParameters}";

		var code = $@"// <auto-generated />
#nullable enable
using System;
using CodeChops.DomainDrivenDesign.DomainModeling.Identities;

{GetNamespaceDeclaration()}

{GetClassDeclaration()}
{{	
	{GetIdPropertyCreation()}
	{GetIdObjectCreation(idData.IdGenerationMethod, idData.IdTypeName, idData.IdBaseType, idData.IdPrimitiveType)}
	{GetEqualityComparison()}
}}

#nullable restore
";

		return code;
		
		// Creates the namespace definition of the location of the enum definition (or null if the namespace is not defined).
		string? GetNamespaceDeclaration()
		{
			if (idData.Namespace is null) return null;

			var code = $@"namespace {idData.Namespace};";
			return code;
		}

		string GetClassDeclaration()
		{
			var iHasIdImplementation = idData.IdGenerationMethod == IdGenerationMethod.EntityBase || idData.IdPropertyName != DefaultIdPropertyName 
				? null
				: $" : IHasId<{className}.{idData.IdTypeName}>";
			
			var code = $"{idData.OuterClassDeclaration} {className}{iHasIdImplementation}";
			return code;
		}
		
		string GetIdPropertyCreation()
		{
			if (idData.IdGenerationMethod == IdGenerationMethod.EntityBase)
			{
				return @$"
	public abstract Id {idData.IdPropertyName} {{ get; }}
";
			}

			var code = $@"
	public {(idData.IdGenerationMethod == IdGenerationMethod.EntityImplementation ? "override " : "")}{idData.IdTypeName} {idData.IdPropertyName} {{ get; }} = new();
";

			return code;
		}

		string GetEqualityComparison()
		{
			if (idData.IdGenerationMethod is IdGenerationMethod.EntityImplementation or IdGenerationMethod.Record)
				return "";
					
			var code = @$"
	public sealed override int GetHashCode()
	{{
		return this.Id.HasDefaultValue
			? HashCode.Combine(this)
			: this.Id.GetHashCode();
	}}
	
	public sealed override bool Equals(object? obj)
	{{
		return obj is {className} other 
		       && obj.GetType() == this.GetType() 
		       && this.Equals(other);
	}}

	public bool Equals({className}? other)
	{{
		if (other is null) return false;
		if (ReferenceEquals(this, other)) return true;
		if (other.GetType() != this.GetType()) return false;
		
		return !this.Id.HasDefaultValue && this.Id.Equals(other.Id);
	}}";

			return code;
		}
		
		static string? GetIdObjectCreation(IdGenerationMethod generationMethod, string idName, string idBaseType, string? idPrimitiveType)
		{
			if (generationMethod == IdGenerationMethod.EntityBase)
				return null;
			
			var code = $@"
	public partial record {idName} : {idBaseType}
	{{ 
		public {idName}({idPrimitiveType} value) : base(value) {{ }}
		public {idName}() : base() {{ }}
	}}
";

			return code;
		}
	}
}
