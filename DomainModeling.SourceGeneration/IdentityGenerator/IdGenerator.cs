using System.Collections.Immutable;
using CodeChops.SourceGeneration.Utilities;
using Microsoft.CodeAnalysis.Diagnostics;

namespace CodeChops.DomainModeling.SourceGeneration.IdentityGenerator;

[Generator]
public class IdGenerator : IIncrementalGenerator
{
	internal const string AttributeNamespace		= "CodeChops.DomainModeling.Attributes";
	internal const string AttributeName				= "GenerateIdentity";
	internal const string IdNamespace				= "CodeChops.DomainModeling.Identities";
	internal const string DefaultIdPropertyName		= "Id";
	internal const string DefaultIdUnderlyingType	= "global::System.UInt64";

	public void Initialize(IncrementalGeneratorInitializationContext context)
	{
		var valueProvider = context.SyntaxProvider
			.CreateSyntaxProvider(
				predicate: IdSyntaxReceiver.CheckIfProbablyNeedsStronglyTypedId,
				transform: static (context, _) => IdSyntaxReceiver.GetModel((TypeDeclarationSyntax)context.Node, context.SemanticModel))
			.Where(static model => model is not null)
			.Collect()
			.Combine(context.AnalyzerConfigOptionsProvider);

		context.RegisterSourceOutput(source: valueProvider, action: static (context, valueProvider) => CreateSource(context, valueProvider.Left!, valueProvider.Right));
	}

	private static void CreateSource(SourceProductionContext context, ImmutableArray<IdDataModel> models, AnalyzerConfigOptionsProvider configOptionsProvider)
	{
		try
		{
			foreach (var model in models)
			{
				var code = CreateSource(model);
				var fileName = model.Namespace is null ? model.Name : $"{model.Namespace}.{model.Name}";

				fileName = $"{fileName}.{model.Name}";
				fileName = FileNameHelpers.GetFileName(fileName, configOptionsProvider);

				context.AddSource(fileName, SourceText.From(code, Encoding.UTF8));
			}
		}

		catch (Exception e)
		{
			var descriptor = new DiagnosticDescriptor(nameof(IdGenerator), "Error", $"{nameof(IdGenerator)} failed to generate due to an error. Please inform CodeChops (www.CodeChops.nl). Error: {e}", "Compilation", DiagnosticSeverity.Error, isEnabledByDefault: true);
			context.ReportDiagnostic(Diagnostic.Create(descriptor, null));

			context.AddSource($"{nameof(IdGenerator)}_Exception_{Guid.NewGuid()}", SourceText.From($"/*{e}*/", Encoding.UTF8));
		}
	}

	private static string CreateSource(IdDataModel data)
	{
		var code = new StringBuilder($@"// <auto-generated />
#nullable enable

using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using CodeChops.DomainModeling.Identities;
");

		code.AppendLine(GetNamespaceDeclaration);

		code.AppendLine(GetIdObjectCreation, trimEnd: true);
		code.AppendLine(@"
#nullable restore
".Trim());

		return code.ToString();


		// Creates the namespace definition of the location of the enum definition (or null if the namespace is not defined).
		string? GetNamespaceDeclaration()
			=> data.Namespace is null ? null : $@"
namespace {data.Namespace};
";


		string? GetIdObjectCreation()
		{
			return $@"
[StructLayout(LayoutKind.Auto)]
public readonly partial record struct {data.Name} : IId<{data.Name}, {data.UnderlyingTypeName}>, IHasDefault<{data.Name}>, ICreatable<{data.Name}, {data.UnderlyingTypeName}>, ICreatable<{data.Name}, object>
{{ 
	[DebuggerHidden]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public override string{data.NullOperator} ToString() => this.Value{data.NullOperator}.ToString();

	[EditorBrowsable(EditorBrowsableState.Never)]
	public {data.UnderlyingTypeName} Value {{ get; private init; }}

	[EditorBrowsable(EditorBrowsableState.Never)]
	public object GetValue() => this.Value!;

	[DebuggerHidden]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public static explicit operator {data.Name}({data.UnderlyingTypeName} value) => new() {{ Value = value }};
	[DebuggerHidden]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public static implicit operator {data.UnderlyingTypeName}({data.Name} id) => id.Value;

	#region Comparison
	[DebuggerHidden]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public int CompareTo({data.Name} other) => Comparer<{data.UnderlyingTypeName}>.Default.Compare(this.Value, other.Value);
	
	[DebuggerHidden]
	[EditorBrowsable(EditorBrowsableState.Never)]
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static bool operator <	({data.Name} left, {data.Name} right)	=> left.CompareTo(right) <	0;
	[DebuggerHidden]
	[EditorBrowsable(EditorBrowsableState.Never)]
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static bool operator <=	({data.Name} left, {data.Name} right)	=> left.CompareTo(right) <= 0;
	[DebuggerHidden]
	[EditorBrowsable(EditorBrowsableState.Never)]
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static bool operator >	({data.Name} left, {data.Name} right)	=> left.CompareTo(right) >	0;
	[DebuggerHidden]
	[EditorBrowsable(EditorBrowsableState.Never)]
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static bool operator >=	({data.Name} left, {data.Name} right)	=> left.CompareTo(right) >= 0;
	#endregion

	[DebuggerHidden]
	bool IId.HasDefaultValue => this.Value == default;
	[DebuggerHidden]
	static {data.Name} IHasDefault<{data.Name}>.Default => default;

	[DebuggerHidden]
	public {data.Name}({data.UnderlyingTypeName} value, Validator? validator = null)
	{{
		this.Value = value;
	}}

	#region Factories

	[DebuggerHidden] 
	[EditorBrowsable(EditorBrowsableState.Never)]
	public static bool TryCreate({data.UnderlyingTypeName} value, {(data.NullOperator is null ? null : "[NotNullWhen(true)] ")}out {data.Name} createdObject)
		=> ICreatable<{data.Name}, {data.UnderlyingTypeName}>.TryCreate(value, out createdObject, out _);

	[DebuggerHidden] 
	[EditorBrowsable(EditorBrowsableState.Never)]
	public static bool TryCreate({data.UnderlyingTypeName} value, {(data.NullOperator is null ? null : "[NotNullWhen(true)] ")}out {data.Name} createdObject, out Validator validator)
		=> ICreatable<{data.Name}, {data.UnderlyingTypeName}>.TryCreate(value, out createdObject, out validator);

	[DebuggerHidden] 
	[EditorBrowsable(EditorBrowsableState.Never)]
	public static {data.Name} Create({data.UnderlyingTypeName} value, Validator? validator = null) 
		=> new(value, validator);

	[DebuggerHidden] 
	[EditorBrowsable(EditorBrowsableState.Never)]
	public static {data.Name} Create(object value, Validator? validator = null) 
		=> new(({data.UnderlyingTypeName})value, validator);

	#endregion
}}
";
		}
	}
}
