using System.Collections.Immutable;

namespace CodeChops.DomainDrivenDesign.DomainModeling.SourceGeneration;

[Generator]
public class StrongIdGenerator : IIncrementalGenerator
{
	public void Initialize(IncrementalGeneratorInitializationContext context)
	{		
		var valueProvider = context.SyntaxProvider
			.CreateSyntaxProvider(
				predicate: SyntaxReceiver.CheckIfProbablyNeedsStronglyTypedId,
				transform: SyntaxReceiver.GetModel)
			.Where(static model => model is not null)
			.Collect();
		
		context.RegisterSourceOutput(source: valueProvider, action: CreateSource!);
	}
	
	private static void CreateSource(SourceProductionContext context, ImmutableArray<DataModel> models)
	{
		foreach (var model in models)
		{
			var code = CreateSource(model);

			var fileName = model.Namespace is null 
				? model.Name 
				: $"{model.Namespace}.{model.Name}";
			
			context.AddSource($"{fileName}.g.cs", SourceText.From(code, Encoding.UTF8));
		}
	}

	private static string CreateSource(DataModel data)
	{
		var className = data.Name;

		var idName = $"{className}Id";
		var code = $@"// <auto-generated />
#nullable enable
using System;
{GetNamespaceDeclaration()}

{data.Declaration} {className}
{{
	public override {idName} Id {{ get; }} = new();

	public partial record {idName} : global::CodeChops.DomainDrivenDesign.DomainModeling.Identities.Id<{idName}, {data.IdIntegralType}> 
	{{ 
		public {idName}({data.IdIntegralType} value) : base(value) {{ }}
		public {idName}() : base() {{ }}
	}}
}}

#nullable restore
";

		return code;
		
		
		// Creates the namespace definition of the location of the enum definition (or null if the namespace is not defined).
		string? GetNamespaceDeclaration()
		{
			if (data.Namespace is null) return null;

			var code = $@"namespace {data.Namespace};";
			return code;
		}
	}
}
