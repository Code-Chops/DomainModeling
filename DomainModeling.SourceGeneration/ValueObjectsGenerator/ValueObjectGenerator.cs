using System.Collections.Immutable;
using CodeChops.DomainDrivenDesign.DomainModeling.SourceGeneration.ValueObjectsGenerator.Models;
using CodeChops.SourceGeneration.Utilities;
using Microsoft.CodeAnalysis.Diagnostics;

namespace CodeChops.DomainDrivenDesign.DomainModeling.SourceGeneration.ValueObjectsGenerator;

[Generator]
public class ValueObjectGenerator : IIncrementalGenerator
{
	public void Initialize(IncrementalGeneratorInitializationContext context)
	{		
		var valueProvider = context.SyntaxProvider
			.CreateSyntaxProvider(
				predicate: ValueObjectSyntaxReceiver.CheckIfProbablyIsValueObjectToGenerate,
				transform: static (context, _) => ValueObjectSyntaxReceiver.GetModel((TypeDeclarationSyntax)context.Node, context.SemanticModel))
			.Where(static model => model is not null)
			.Collect()
			.Combine(context.AnalyzerConfigOptionsProvider);
		
		context.RegisterSourceOutput(source: valueProvider, action: static (context, valueProvider) => CreateSource(context, valueProvider.Left!, valueProvider.Right));
	}
	
	private static void CreateSource(SourceProductionContext context, ImmutableArray<ValueObjectBase> models, AnalyzerConfigOptionsProvider configOptionsProvider)
	{
		try
		{
			foreach (var model in models)
			{
				var code = CreateSource(model, configOptionsProvider);
	
				var fileName = model.Namespace is null 
					? model.Name 
					: $"{model.Namespace}.{model.Name}";
				
				fileName = FileNameHelpers.GetFileName(fileName, configOptionsProvider);
				
				context.AddSource(fileName, SourceText.From(code, Encoding.UTF8));
			}
		}
		
		catch (Exception e)
		{
			var descriptor = new DiagnosticDescriptor(nameof(ValueObjectGenerator), "Error", $"{nameof(ValueObjectGenerator)} failed to generate due to an error. Please inform CodeChops (www.CodeChops.nl). Error: {e}", "Compilation", DiagnosticSeverity.Error, isEnabledByDefault: true);
			context.ReportDiagnostic(Diagnostic.Create(descriptor, null));

			context.AddSource($"{nameof(ValueObjectGenerator)}_Exception_{Guid.NewGuid()}", SourceText.From($"/*{e}*/", Encoding.UTF8));
		}
	}

	private static string CreateSource(ValueObjectBase data, AnalyzerConfigOptionsProvider configOptionsProvider)
	{
		if (!configOptionsProvider.GlobalOptions.TryGetValue("build_property.RootNamespace", out var rootNamespace))
			rootNamespace = "global::";
		
		var validatorArgument = data.UseValidationExceptions
			? ", Validator? validator = null"
			: null;

		var code = new StringBuilder();
		
		code.AppendLine(@"// <auto-generated />
#nullable enable
#pragma warning disable CS0612 // Is deprecated (level 1)
#pragma warning disable CS0618 // Member is obsolete (level 2)
");

		code.AppendLine(GetUsings())
			.AppendLine(GetNamespaceDeclaration)
			.Append($@"
/// <summary>
/// {GetComment()}
/// </summary>
[StructLayout(LayoutKind.Auto)]
")
			.AppendLine(GetObjectDeclaration().TrimEnd())
			.AppendLine("{")
			.AppendLine(GetToString())
			.AppendLine(GetHashCode)
			.AppendLine(GetEquals)
			.AppendLine(GetComparison)
			.AppendLine(GetStaticDefault)
			.AppendLine(GetCast)
			.AppendLine(GetLengthOrCount)
			.AppendLine(GetEnumerator)
			.AppendLine(GetProperty())
			.Append("	#region Constructor")
			.AppendLine(GetDefaultConstructor())
			.AppendLine(GetForbiddenParameterlessConstructor)	
			.AppendLine("	#endregion")
			.AppendLine(GetFactories())
			.Append(GetEmptyCustomValidation())
			.AppendLine(GetExtraCode)
			.TrimEnd().AppendLine()
			.AppendLine("}")
			.Append(@"
#pragma warning restore CS0618 // Member is obsolete (level 2)
#pragma warning restore CS0612 // Is deprecated (level 1)
#nullable restore
");

		return code.ToString();
		
		
		string GetUsings()
		{
			var namespaces = data.GetNamespaces().Union(new[]
			{
				"System",
				"System.Collections",
				"System.Collections.Immutable",
				"System.ComponentModel",
				"System.Diagnostics",
				"System.Diagnostics.CodeAnalysis",
				"System.Globalization",
				"System.Runtime.InteropServices",
				"System.Text.RegularExpressions",
				"CodeChops.DomainDrivenDesign.DomainModeling.Exceptions",
				"CodeChops.DomainDrivenDesign.DomainModeling.Validation",
				rootNamespace,
			});
			
			var namespaceUsings = namespaces
				.OrderBy(ns => ns.StartsWith("CodeChops"))
				.ThenBy(ns => ns)
				.Aggregate(new StringBuilder(), (sb, ns) => sb.AppendLine($"using {ns};"))
				.ToString();

			return namespaceUsings;
		}
		

		string? GetNamespaceDeclaration() => data.Namespace is null 
			? null 
			: $@"namespace {data.Namespace};";


		string GetComment()
		{
			return $@"{data.GetCommentsCode()}
/// Extends: <see cref=""{data.Name.Replace('<', '{').Replace('>', '}')}""/>.";
		}
		
		
		string? GetInterfaces()
		{
			if (data.ValueObjectType.IsRefLikeType) 
				return null;
			
			var interfaces = new StringBuilder(" : IValueObject");
			if (data.ConstructorIsPublic && data.UseValidationExceptions) interfaces.Append($", ICreatable<{data.Name}, {data.UnderlyingTypeName}>");
			if (data.GenerateComparison && data.GetCompareToCode() is not null) interfaces.Append($", IEquatable<{data.Name}{data.NullOperator}>");
			if (data.GenerateStaticDefault) interfaces.Append($", IHasDefault<{data.Name}>");
			if (data.AddIComparable && data.GenerateComparison) interfaces.Append($", IComparable<{data.Name}>");
			if (data.GenerateEnumerable && data is IEnumerableValueObject enumerableValueObject) interfaces.Append($", IEnumerable<{enumerableValueObject.ElementTypeName}>");

			var extraInterfaces = data.GetInterfacesCode();
			if (extraInterfaces is not null) interfaces.Append($", {extraInterfaces}");
			
			return interfaces.ToString();
		}


		string GetObjectDeclaration()
		{
			var code = new StringBuilder();

			var declaration = data.ValueObjectType.GetObjectDeclaration();
			
			if (data.ValueObjectType.TypeKind == TypeKind.Struct)
				declaration = declaration.Replace("partial", "readonly partial");

			code.AppendLine($"{declaration} {data.ValueObjectType.GetTypeNameWithGenericParameters()}{GetInterfaces()}");

			return code.ToString();
		}

		
		string GetToString() => data.GenerateToString 
			? $@"	[DebuggerHidden]
	[EditorBrowsable(EditorBrowsableState.Never)]
	{data.GetToStringCode()}" 
			: $@"	public override partial string ToString();";

		
		string? GetHashCode() => data.GenerateComparison
			? $@"
	#region Equals
	[DebuggerHidden]
	[EditorBrowsable(EditorBrowsableState.Never)]
	{data.GetHashCodeCode()}" 
			: null;


		string? GetEquals()
		{
			if (!data.GenerateComparison) return null;

			var code = new StringBuilder($@"
	[DebuggerHidden]
	[EditorBrowsable(EditorBrowsableState.Never)]
	{data.GetEqualsCode()}
");

			if (!data.ValueObjectType.IsRecord)
				code.TrimEnd().AppendLine($@"
	[DebuggerHidden]
	[EditorBrowsable(EditorBrowsableState.Never)]
	{data.GetObjectEqualsCode()}
");

			code.AppendLine(data.ValueObjectType.IsRecord
				? null
				: $@"
	[DebuggerHidden]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public static bool operator ==({data.Name} left, {data.Name} right) => left.{data.PropertyName} == right.{data.PropertyName};
	[DebuggerHidden]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public static bool operator !=({data.Name} left, {data.Name} right) => !(left == right);");

			code.Append("	#endregion");
			
			return code.ToString();
		}

		
		string? GetComparison()
		{
			if (!data.GenerateComparison) return null;
			
			var compareToCode = data.GetCompareToCode();
			if (compareToCode is null) return null;
			
			return $@"
	#region Comparison
	[DebuggerHidden]
	[EditorBrowsable(EditorBrowsableState.Never)]
	{compareToCode}

	[DebuggerHidden]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public static bool operator <	({data.Name} left, {data.Name} right)	=> left.CompareTo(right) <	0;
	[DebuggerHidden]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public static bool operator <=	({data.Name} left, {data.Name} right)	=> left.CompareTo(right) <= 0;
	[DebuggerHidden]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public static bool operator >	({data.Name} left, {data.Name} right)	=> left.CompareTo(right) >	0;
	[DebuggerHidden]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public static bool operator >=	({data.Name} left, {data.Name} right)	=> left.CompareTo(right) >= 0;
	#endregion";
		}
		
		
		string? GetStaticDefault()
		{
			if (!data.GenerateStaticDefault) return null;
			
			return data.ForbidParameterlessConstruction 
				? $@"
	[DebuggerHidden]
	public static {data.Name} Default {{ get; }} = new({data.GetDefaultValue()});
"
				: $@"
	[DebuggerHidden]
	public static {data.Name} Default {{ get; }} = new();
";
		}
		
		
		string GetCast()
		{
			var code = new StringBuilder();
			
			code.Append($@"
	#region Casts
	[DebuggerHidden]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public static implicit operator {data.UnderlyingTypeName}({data.Name} {data.LocalVariableName}) => {data.LocalVariableName}.{data.PropertyName};

	[DebuggerHidden]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public static explicit operator {data.Name}({data.UnderlyingTypeName} {data.LocalVariableName}) => new({data.LocalVariableName});
");
			
			var extraCastCode = data.GetExtraCastCode(); 
			
			if (extraCastCode is not null) code.AppendLine($@"
	[DebuggerHidden]
	[EditorBrowsable(EditorBrowsableState.Never)]
	{extraCastCode}
");

			code.TrimEnd().AppendLine().Append("	#endregion");
			
			return code.ToString();
		}


		string? GetLengthOrCount()
		{
			var code = data.GetLengthOrCountCode();

			return code is null
				? null
				: $@"
	[DebuggerHidden]
	[EditorBrowsable(EditorBrowsableState.Never)]
	{code}";
		}
		
		
		string? GetEnumerator()
		{
			if (!data.GenerateEnumerable) return null;
			
			var enumeratorCode = data.GetEnumeratorCode();
			
			return enumeratorCode is null
				? null
				: @$"
	#region Enumerator
	[DebuggerHidden]
	[EditorBrowsable(EditorBrowsableState.Never)]
	{enumeratorCode}
	[DebuggerHidden]
	[EditorBrowsable(EditorBrowsableState.Never)]
	IEnumerator IEnumerable.GetEnumerator() => this.GetEnumerator();
	#endregion";
		}
		
		
		string GetProperty()
		{
			var error = $"Don't use this field, use the {data.PropertyName} property instead";

			return $@"
	#region ValueProperty
	/// <summary>
    /// Get the underlying structural value.
    /// </summary>
	[DebuggerHidden]
	[EditorBrowsable(EditorBrowsableState.Never)]
	{(data.PropertyIsPublic ? "public" : "private")} {data.UnderlyingTypeName} {data.PropertyName} => this.{data.BackingFieldName}{(data is DefaultValueObject ? null : $" ?? {data.GetDefaultValue()}")};

    /// <summary>
    /// Backing field for the structural value. {error} <see cref='{data.PropertyName}'/>.
	/// </summary>
	[Obsolete(""{error}."")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	private readonly {data.UnderlyingTypeName} {data.BackingFieldName} = {data.GetDefaultValue()};
	#endregion
";
		}
		
		
		string GetDefaultConstructor()
		{
			var code = new StringBuilder();

			code.Append(@$"
	[DebuggerHidden] 
	{(data.ConstructorIsPublic ? "public" : "private")} {data.ValueObjectType.Name}({data.UnderlyingTypeName} {data.LocalVariableName}{validatorArgument})
	{{	
		");
			
			if (validatorArgument is null) 
				code
					.Append("var validator = ")
					.AppendLine(data.ValueObjectType.IsRefLikeType 
						? $"new Validator(objectName: typeof({data.ValueObjectType.GetTypeNameWithGenericParameters()}).Name, ValidatorMode.Default);" 
						: $"Validator.Get<{data.Name}>.Default;");
			else
				code.AppendLine($"validator ??= {(data.ValueObjectType.IsRefLikeType ? $"new Validator(objectName: typeof({data.ValueObjectType.GetTypeNameWithGenericParameters()}).Name, ValidatorMode.Default);" : $"Validator.Get<{data.Name}>.Default;")}");
					
			var index = rootNamespace.IndexOf(".Domain", StringComparison.Ordinal);
			
			var boundedContextName = index > 0 
				? rootNamespace.Substring(0, index).Split('.').Last()
				: "UnknownBoundedContextName";

			var errorCodeStart = $"{boundedContextName}_{data.Name.Replace('<', '_').Replace(">", "")}";
			var specificValidationCode = data.GetValidationCode(errorCodeStart)?.Trim();

			if (specificValidationCode is not null)
				code.Append($@"
		validator
			{specificValidationCode};
");

			code.AppendLine($@"
		this.{data.BackingFieldName} = {data.LocalVariableName}{data.GetValueTransformation()};");

			code.AppendLine(@"
		this.Validate(validator);");

			code.Append("	}");
			
			return code.ToString();
		}

		
		string? GetForbiddenParameterlessConstructor()
		{
			if (!data.ForbidParameterlessConstruction) return null;
			
			var error = $"Don't use this empty constructor. A {data.UnderlyingTypeName} should be provided when initializing {data.Name}.";
			
			return $@"
	#pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor
	[Obsolete(""{error}"", true)]
	[DebuggerHidden]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public {data.ValueObjectType.Name}() => throw new InvalidOperationException($""{error}"");
	#pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor";
		}
		
		
		string GetFactories()
		{
			var validatorInitialization = data.ValueObjectType.IsRefLikeType
				? $"new Validator(objectName: typeof({data.ValueObjectType.GetTypeNameWithGenericParameters()}).Name, ValidatorMode.DoNotThrow)" 
				: $"Validator.Get<{data.Name}>.DoNotThrow()";
			
			return $@"
	[DebuggerHidden] 
	[EditorBrowsable(EditorBrowsableState.Never)]
	public static bool TryCreate({data.UnderlyingTypeName} {data.LocalVariableName}, {(data.NullOperator is null ? null : "[NotNullWhen(true)] ")}out {data.Name}{data.NullOperator} createdObject)
		=> TryCreate({data.LocalVariableName}, out createdObject, out _);

	#region Factories
	[DebuggerHidden] 
	[EditorBrowsable(EditorBrowsableState.Never)]
	public static bool TryCreate({data.UnderlyingTypeName} {data.LocalVariableName}, {(data.NullOperator is null ? null : "[NotNullWhen(true)] ")}out {data.Name}{data.NullOperator} createdObject, out Validator validator)
	{{
		validator = {validatorInitialization};
		createdObject = Create({data.LocalVariableName}{(validatorArgument is null ? null : ", validator")});
		
		if (!validator.IsValid)
			createdObject = default;			

		return validator.IsValid;
	}}

	[DebuggerHidden] 
	[EditorBrowsable(EditorBrowsableState.Never)]
	public static {data.ValueObjectType.GetTypeNameWithGenericParameters()} Create({data.UnderlyingTypeName} {data.LocalVariableName}{validatorArgument}) 
		=> new({data.LocalVariableName}{(validatorArgument is null ? null : ", validator")});
	#endregion
";
		}

	
		string GetEmptyCustomValidation()
		{
			var code = new StringBuilder("	#region ValidationPlaceholder");

			if (data.AddCustomValidation)
				code.Append($@"
	private partial void Validate(Validator validator);
");
			else 
				code.Append($@"
	/// <summary>
	/// This placeholder is created so Validate will always be called from the constructor.
	/// If a custom validation already exists, this will cause an error. In that case, set addCustomValidation to true.
	/// </summary>
	private void Validate(Validator validator)
	{{
	}}
");

			code.AppendLine("	#endregion");

			return code.ToString();
		}
		
		
		string? GetExtraCode()
		{
			var code = data.GetExtraCode()?.Trim();

			if (code is null)
				return null;

			return $@"
	#region TypeSpecific
	[DebuggerHidden]
	[EditorBrowsable(EditorBrowsableState.Never)]
	{code}
	#endregion
";
		}
	}
}
